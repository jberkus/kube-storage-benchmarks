#!/bin/bash

readonly KUBE_CMD=kubectl
readonly PVC_SIZE=10Gi
readonly PGBENCH_USER_NAME=redhat
readonly PGBENCH_PASSWORD=redhat
readonly PGBENCH_PG_DB=userdb
readonly WORKERS_LIST_FILE=/root/sagy/workers
readonly MONGO_POD_PREFIX=mongodb
readonly MONGO_PVC_PREFIX=mongodb-pvc
readonly NUMBER_OF_WORKERS=4
readonly DB_PER_WORKER=8
readonly MONGO_POD_RAM=1Gi
readonly MONGO_POD_CPU=0.5

function create_mongo_config_map()
{
  cat <<EOF | ${KUBE_CMD} create -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-initdb
data:
  ycsb.js: |
    const targetDbStr = 'ycsb';
    const rootUser = 'admin';
    const rootPass = 'redhat';
    const adminDb = db.getSiblingDB('admin');
    adminDb.auth(rootUser, rootPass);
    print('Successfully authenticated admin user');
    const targetDb = db.getSiblingDB(targetDbStr);
    targetDb.createUser({
      user: "redhat",
      pwd: "redhat",
      roles: [{
        role: "dbOwner",
        db: targetDbStr
      }]
    });
    print('Successfully created redhat user');
EOF
}

function create_pvc()
{
  cat <<EOF | ${KUBE_CMD} create -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${pvc_name}
spec:
  storageClassName: rook-ceph-block
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: ${PVC_SIZE}
EOF
}

function create_mongo()
{
  cat <<EOF | ${KUBE_CMD} create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${pod_name}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: ${pod_name}
  template:
    metadata:
      labels:
        app: ${pod_name}
    spec:
      containers:
      - name: ${pod_name}
        image: mongo
        imagePullPolicy: "Always"
        ports:
        - containerPort: 27017
        volumeMounts:
        - mountPath: /data/db
          name: mongodb
          mountPath: /docker-entrypoint-initdb.d
          name: mongo-initdb
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: admin
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: redhat
          - name: MONGO_INITDB_DATABASE
            value: redhat
        resources:
          requests:
            memory: ${MONGO_POD_RAM}
            cpu: ${MONGO_POD_CPU}
          limits:
            memory: ${MONGO_POD_RAM}
            cpu: ${MONGO_POD_CPU}
      volumes:
      - name: mongodb
        persistentVolumeClaim:
          claimName: ${pvc_name}
      - name: mongo-initdb
        configMap:
          name: mongo-initdb
EOF
}


create_mongo_config_map

mapfile -t node_array < ${WORKERS_LIST_FILE}

for ((j=1; j<=${DB_PER_WORKER}*${NUMBER_OF_WORKERS}; j++))
do
  echo "cordonning all nodes ..."
  for node_name in ${node_array[@]}
  do
    ${KUBE_CMD} cordon ${node_name}
  done

  node_number=$((j%NUMBER_OF_WORKERS))
  ${KUBE_CMD} uncordon ${node_array[${node_number}]}
  pvc_name=${MONGO_PVC_PREFIX}-${j}
  pod_name=${MONGO_POD_PREFIX}-${j}
  echo "working on pod ${pod_name}"
  create_pvc
  create_mongo
  kubectl wait --for=condition=Ready $(kubectl get pod -l app=${pod_name} -o name)
  ${KUBE_CMD} cordon ${node_array[${node_number}]}
done

for node in ${node_array[@]}
do
 ${KUBE_CMD} uncordon ${node}
done
